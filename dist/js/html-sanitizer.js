class HTMLSanitizer { constructor() { this.allowedTags = { 'p': ['class', 'id'], 'div': ['class', 'id'], 'span': ['class', 'id'], 'h1': ['class', 'id'], 'h2': ['class', 'id'], 'h3': ['class', 'id'], 'h4': ['class', 'id'], 'h5': ['class', 'id'], 'h6': ['class', 'id'], 'strong': ['class'], 'em': ['class'], 'b': ['class'], 'i': ['class'], 'u': ['class'], 'br': [], 'hr': [], 'ul': ['class'], 'ol': ['class'], 'li': ['class'], 'a': ['href', 'target', 'rel', 'class'], 'img': ['src', 'alt', 'class', 'width', 'height'], 'blockquote': ['class'], 'code': ['class'], 'pre': ['class'] }; this.dangerousAttributes = [ 'onclick', 'onload', 'onerror', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'onchange', 'onsubmit', 'onreset', 'onselect', 'onkeydown', 'onkeypress', 'onkeyup', 'javascript:', 'vbscript:', 'data:', 'about:' ]; this.dangerousProtocols = [ 'javascript:', 'vbscript:', 'data:', 'about:' ]; } sanitize(html) { if (!html || typeof html !== 'string') { return ''; } html = html.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, ''); html = html.replace(/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/gi, ''); this.dangerousAttributes.forEach(attr => { const regex = new RegExp(`\\s*${attr}\\s*=\\s*["'][^"']*["']`, 'gi'); html = html.replace(regex, ''); }); this.dangerousProtocols.forEach(protocol => { const regex = new RegExp(`\\s*href\\s*=\\s*["']\\s*${protocol}[^"']*["']`, 'gi'); html = html.replace(regex, ''); }); return this.filterHTML(html); } filterHTML(html) { const div = document.createElement('div'); div.innerHTML = html; return this.processNode(div).innerHTML; } processNode(node) { const allowedNode = document.createElement('div'); Array.from(node.childNodes).forEach(child => { if (child.nodeType === Node.TEXT_NODE) { allowedNode.appendChild(child.cloneNode(true)); } else if (child.nodeType === Node.ELEMENT_NODE) { const tagName = child.tagName.toLowerCase(); if (this.allowedTags[tagName]) { const newElement = document.createElement(tagName); this.allowedTags[tagName].forEach(attr => { const attrValue = child.getAttribute(attr); if (attrValue && this.isAttributeValueSafe(attr, attrValue)) { newElement.setAttribute(attr, attrValue); } }); const processedChild = this.processNode(child); newElement.innerHTML = processedChild.innerHTML; allowedNode.appendChild(newElement); } else { const processedChild = this.processNode(child); allowedNode.innerHTML += processedChild.innerHTML; } } }); return allowedNode; } isAttributeValueSafe(attr, value) { if (attr === 'href') { const lowerValue = value.toLowerCase().trim(); return !this.dangerousProtocols.some(protocol => lowerValue.startsWith(protocol)); } const dangerousPatterns = [ /javascript:/i, /vbscript:/i, /data:/i, /about:/i, /on\w+\s*=/i ]; return !dangerousPatterns.some(pattern => pattern.test(value)); } sanitizeText(text) { if (!text || typeof text !== 'string') { return ''; } const div = document.createElement('div'); div.textContent = text; return div.innerHTML; } safeSetInnerHTML(element, html) { if (!element || !html) { return; } element.innerHTML = this.sanitize(html); } safeAppendHTML(element, html) { if (!element || !html) { return; } const sanitizedHTML = this.sanitize(html); element.innerHTML += sanitizedHTML; } } window.htmlSanitizer = new HTMLSanitizer(); window.sanitizeHTML = function(html) { return window.htmlSanitizer.sanitize(html); }; window.sanitizeText = function(text) { return window.htmlSanitizer.sanitizeText(text); }; window.safeSetInnerHTML = function(element, html) { return window.htmlSanitizer.safeSetInnerHTML(element, html); }; window.safeAppendHTML = function(element, html) { return window.htmlSanitizer.safeAppendHTML(element, html); }; console.log('HTML Sanitizer initialized - XSS protection enabled');