class ProductionLogger { constructor() { this.isProduction = this.detectEnvironment(); this.logs = []; this.maxLogs = 100; if (this.isProduction) { this.overrideConsole(); } } detectEnvironment() { return false; return ( window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1' && !window.location.hostname.includes('local') && !window.location.search.includes('debug=true') ); } overrideConsole() { this.originalConsole = { log: console.log, warn: console.warn, error: console.error, info: console.info, debug: console.debug }; console.log = (...args) => this.log('log', ...args); console.info = (...args) => this.log('info', ...args); console.debug = (...args) => this.log('debug', ...args); console.warn = (...args) => this.log('warn', ...args); console.error = (...args) => this.log('error', ...args); } log(level, ...args) { const timestamp = new Date().toISOString(); const logEntry = { timestamp, level, message: args.join(' '), url: window.location.href }; this.logs.push(logEntry); if (this.logs.length > this.maxLogs) { this.logs.shift(); } if (this.isProduction) { if (level === 'error' || level === 'warn') { this.originalConsole[level](`[${timestamp}] ${level.toUpperCase()}:`, ...args); } } else { this.originalConsole[level](`[${timestamp}] ${level.toUpperCase()}:`, ...args); } } safeLog(message, data = null) { if (!this.isProduction) { console.log(message, data); } } safeWarn(message, data = null) { console.warn(message, data); } safeError(message, error = null) { console.error(message, error); } getLogs() { return this.logs; } clearLogs() { this.logs = []; } reportError(error, context = '') { const errorReport = { timestamp: new Date().toISOString(), error: error.message || error, stack: error.stack, context, url: window.location.href, userAgent: navigator.userAgent }; this.logs.push({ ...errorReport, level: 'error' }); this.safeError('Error reported:', errorReport); } } window.productionLogger = new ProductionLogger(); window.safeLog = function(message, data) { return window.productionLogger.safeLog(message, data); }; window.safeWarn = function(message, data) { return window.productionLogger.safeWarn(message, data); }; window.safeError = function(message, error) { return window.productionLogger.safeError(message, error); }; window.reportError = function(error, context) { return window.productionLogger.reportError(error, context); }; window.addEventListener('error', function(event) { window.productionLogger.reportError(event.error, 'Global error handler'); }); window.addEventListener('unhandledrejection', function(event) { window.productionLogger.reportError(event.reason, 'Unhandled promise rejection'); }); if (window.productionLogger.isProduction) { console.log('Production Logger initialized - Debug output suppressed'); } else { console.log('Production Logger initialized - Development mode active'); }