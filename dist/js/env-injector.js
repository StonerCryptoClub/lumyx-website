class EnvInjector { constructor(envConfig) { this.envConfig = envConfig; } generateEnvScript() { const configScript = ` <script> window.ENV_CONFIG = { CONTENTFUL_SPACE_ID: '${this.envConfig.CONTENTFUL_SPACE_ID || ''}', CONTENTFUL_ACCESS_TOKEN: '${this.envConfig.CONTENTFUL_ACCESS_TOKEN || ''}', EMAILJS_PUBLIC_KEY: '${this.envConfig.EMAILJS_PUBLIC_KEY || ''}', EMAILJS_SERVICE_ID: '${this.envConfig.EMAILJS_SERVICE_ID || ''}', EMAILJS_CLIENT_TEMPLATE_ID: '${this.envConfig.EMAILJS_CLIENT_TEMPLATE_ID || ''}', EMAILJS_TEAM_TEMPLATE_ID: '${this.envConfig.EMAILJS_TEAM_TEMPLATE_ID || ''}' }; window.config = { contentful: { spaceId: '${this.envConfig.CONTENTFUL_SPACE_ID || ''}', accessToken: '${this.envConfig.CONTENTFUL_ACCESS_TOKEN || ''}' }, emailjs: { publicKey: '${this.envConfig.EMAILJS_PUBLIC_KEY || ''}', serviceId: '${this.envConfig.EMAILJS_SERVICE_ID || ''}', clientTemplateId: '${this.envConfig.EMAILJS_CLIENT_TEMPLATE_ID || ''}', teamTemplateId: '${this.envConfig.EMAILJS_TEAM_TEMPLATE_ID || ''}' } }; Object.freeze(window.ENV_CONFIG); Object.freeze(window.config); </script>`; return configScript; } injectIntoHtml(htmlContent) { const envScript = this.generateEnvScript(); const envLoaderPattern = /<script src="js\/env-loader\.js"><\/script>/; if (envLoaderPattern.test(htmlContent)) { return htmlContent.replace(envLoaderPattern, envScript + '\n <script src="js/env-loader.js"></script>'); } const headPattern = /<\/head>/; if (headPattern.test(htmlContent)) { return htmlContent.replace(headPattern, envScript + '\n</head>'); } console.warn('Could not find injection point for environment variables'); return htmlContent; } } if (typeof module !== 'undefined' && module.exports) { module.exports = EnvInjector; } if (typeof window !== 'undefined') { window.EnvInjector = EnvInjector; }