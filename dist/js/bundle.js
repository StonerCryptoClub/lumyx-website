function trackBookingStart() { console.log('Tracking booking start'); if (typeof fbq !== 'undefined') { fbq('track', 'InitiateCheckout', { content_category: 'Booking', content_name: 'Strategy Call' }); } } async function trackBookingComplete(eventData) { console.log('Tracking booking completion:', eventData); if (typeof fbq !== 'undefined') { fbq('track', 'Schedule', { content_category: 'Booking', content_name: 'Strategy Call', currency: 'USD', value: 0.00, predicted_ltv: 0.00 }); } if (eventData && eventData.event) { const event = eventData.event; const invitee = eventData.invitee || {}; try { const bookingData = { email: invitee.email, name: invitee.name, phone: invitee.phone || null, date: new Date(event.start_time).toISOString().split('T')[0], time: new Date(event.start_time).toLocaleTimeString('en-US', { hour12: false }), callType: 'Strategy Call', eventId: event.uuid, notes: invitee.questions_and_responses || null }; console.log('Storing booking data:', bookingData); if (typeof window.addBooking === 'function') { const result = await window.addBooking(bookingData); console.log('Booking storage result:', result); if (!result.success) { console.error('Failed to store booking:', result.error); } } else { console.error('addBooking function not available'); } } catch (error) { console.error('Error processing booking:', error); } } else { console.error('Invalid event data:', eventData); } } function trackContactSubmit() { if (typeof fbq !== 'undefined') { fbq('track', 'Contact'); } } function trackPricingView() { if (typeof fbq !== 'undefined') { fbq('track', 'ViewContent', { content_category: 'Pricing', content_name: 'Services Pricing' }); } } document.addEventListener('DOMContentLoaded', function() { console.log('Initializing event listeners'); const calendlyContainer = document.getElementById('calendly-container'); if (calendlyContainer) { console.log('Found Calendly container, setting up event listeners'); window.addEventListener('calendly.event_scheduled', function(e) { console.log('Calendly event scheduled:', e.data); trackBookingComplete(e.data); }); calendlyContainer.addEventListener('click', function() { trackBookingStart(); }); } else { console.error('Calendly container not found'); } const contactForm = document.getElementById('contactForm'); if (contactForm) { contactForm.addEventListener('submit', function(e) { trackContactSubmit(); }); } const pricingSection = document.querySelector('.pricing-section'); if (pricingSection) { const observer = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { trackPricingView(); observer.unobserve(entry.target); } }); }, { threshold: 0.5 }); observer.observe(pricingSection); } }); document.addEventListener('DOMContentLoaded', function() { console.log('Newsletter script loaded - simple styling only'); const newsletterInputs = document.querySelectorAll('.newsletter-form input'); newsletterInputs.forEach(input => { input.addEventListener('focus', function() { this.classList.add('focused'); }); input.addEventListener('blur', function() { this.classList.remove('focused'); if (this.checkValidity()) { this.classList.add('valid'); this.classList.remove('invalid'); } else if (this.value) { this.classList.add('invalid'); this.classList.remove('valid'); } }); }); }); document.addEventListener('DOMContentLoaded', function() { const forms = document.querySelectorAll('form'); forms.forEach(form => { if (form.getAttribute('novalidate') === 'true') return; setupFormValidation(form); }); initContactForm(); initNewsletterForm(); }); function setupFormValidation(form) { const inputs = form.querySelectorAll('input, textarea, select'); inputs.forEach(input => { if (input.type === 'hidden') return; input.addEventListener('blur', function() { validateInput(this); }); input.addEventListener('input', function() { this.classList.remove('invalid'); const errorElement = this.parentElement.querySelector('.error-message'); if (errorElement) { errorElement.textContent = ''; errorElement.style.display = 'none'; } }); }); form.addEventListener('submit', function(e) { let isValid = true; inputs.forEach(input => { if (input.type !== 'hidden' && !validateInput(input)) { isValid = false; } }); if (!isValid) { e.preventDefault(); const firstInvalid = form.querySelector('.invalid'); if (firstInvalid) { firstInvalid.focus(); firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' }); } const formError = form.querySelector('.form-error'); if (formError) { formError.textContent = 'Please correct the errors in the form.'; formError.style.display = 'block'; } } else { const formError = form.querySelector('.form-error'); if (formError) { formError.style.display = 'none'; } const submitButton = form.querySelector('button[type="submit"]'); if (submitButton) { const originalText = submitButton.textContent; submitButton.disabled = true; submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Sending...'; setTimeout(() => { submitButton.disabled = false; submitButton.innerHTML = originalText; }, 3000); } } }); } function validateInput(input) { if (input.disabled) return true; const isRequired = input.hasAttribute('required'); const minLength = input.getAttribute('minlength'); const maxLength = input.getAttribute('maxlength'); const pattern = input.getAttribute('pattern'); const type = input.type; const value = input.value.trim(); let errorElement = input.parentElement.querySelector('.error-message'); if (!errorElement) { errorElement = document.createElement('div'); errorElement.className = 'error-message'; input.parentElement.appendChild(errorElement); } let isValid = true; let errorMessage = ''; if (isRequired && value === '') { isValid = false; errorMessage = 'This field is required'; } else if (type === 'email' && value !== '' && !validateEmail(value)) { isValid = false; errorMessage = 'Please enter a valid email address'; } else if (type === 'url' && value !== '' && !validateUrl(value)) { isValid = false; errorMessage = 'Please enter a valid URL'; } else if ((type === 'tel' || input.classList.contains('phone-input')) && value !== '' && !validatePhone(value)) { isValid = false; errorMessage = 'Please enter a valid phone number'; } else if (minLength && value.length < parseInt(minLength)) { isValid = false; errorMessage = `Please enter at least ${minLength} characters`; } else if (maxLength && value.length > parseInt(maxLength)) { isValid = false; errorMessage = `Please enter no more than ${maxLength} characters`; } else if (pattern && value !== '' && !new RegExp(pattern).test(value)) { isValid = false; errorMessage = input.getAttribute('data-pattern-message') || 'Please match the requested format'; } if (isValid) { input.classList.remove('invalid'); input.classList.add('valid'); errorElement.textContent = ''; errorElement.style.display = 'none'; } else { input.classList.remove('valid'); input.classList.add('invalid'); errorElement.textContent = errorMessage; errorElement.style.display = 'block'; } return isValid; } function validateEmail(email) { const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/; return re.test(email); } function validateUrl(url) { try { new URL(url); return true; } catch (_) { return false; } } function validatePhone(phone) { const re = /^[+]?[(]?[0-9]{3}[)]?[-\s.]?[0-9]{3}[-\s.]?[0-9]{4,6}$/; const cleanedPhone = phone.replace(/[\s()-]/g, ''); return re.test(cleanedPhone); } function initContactForm() { const contactForm = document.getElementById('contactForm'); if (!contactForm) return; contactForm.addEventListener('submit', function(e) { e.preventDefault(); const name = document.getElementById('name').value.trim(); const email = document.getElementById('email').value.trim(); const message = document.getElementById('message').value.trim(); let isValid = true; isValid = validateInput(document.getElementById('name')) && isValid; isValid = validateInput(document.getElementById('email')) && isValid; isValid = validateInput(document.getElementById('message')) && isValid; if (isValid) { const submitButton = contactForm.querySelector('button[type="submit"]'); submitButton.disabled = true; submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Sending...'; const formData = { name: name, email: email, message: message }; sendContactForm(formData) .then(response => { showFormSuccess(contactForm, 'Thank you for your message! We will get back to you soon.'); contactForm.reset(); if (window.trackEvent) { window.trackEvent('contact_form_submission', { status: 'success' }); } }) .catch(error => { showFormError(contactForm, 'There was an error sending your message. Please try again later or contact us directly.'); if (window.trackEvent) { window.trackEvent('contact_form_submission', { status: 'error', error: error.message }); } }) .finally(() => { submitButton.disabled = false; submitButton.innerHTML = 'Send Message'; }); } }); } function initNewsletterForm() { const newsletterForms = document.querySelectorAll('.newsletter form'); newsletterForms.forEach(form => { form.addEventListener('submit', function(e) { e.preventDefault(); const emailInput = form.querySelector('input[type="email"]'); if (!emailInput) return; if (validateInput(emailInput)) { const submitButton = form.querySelector('button[type="submit"]'); if (submitButton) { submitButton.disabled = true; submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Subscribing...'; } if (window.trackEvent) { window.trackEvent('newsletter_signup', { source: 'website_footer' }); } setTimeout(() => { form.submit(); }, 500); } }); }); } function sendContactForm(formData) { return new Promise((resolve, reject) => { setTimeout(() => { resolve({ success: true }); }, 1500); }); } function showFormSuccess(form, message) { let successMessage = form.querySelector('.success-message'); if (!successMessage) { successMessage = document.createElement('div'); successMessage.className = 'success-message'; form.prepend(successMessage); } successMessage.textContent = message; successMessage.style.display = 'block'; successMessage.scrollIntoView({ behavior: 'smooth', block: 'center' }); setTimeout(() => { successMessage.style.display = 'none'; }, 5000); } function showFormError(form, message) { let errorMessage = form.querySelector('.form-error'); if (!errorMessage) { errorMessage = document.createElement('div'); errorMessage.className = 'form-error'; form.prepend(errorMessage); } errorMessage.textContent = message; errorMessage.style.display = 'block'; errorMessage.scrollIntoView({ behavior: 'smooth', block: 'center' }); setTimeout(() => { errorMessage.style.display = 'none'; }, 5000); } document.addEventListener('DOMContentLoaded', function() { console.log('Simple form fix applied - no popups'); const allNewsletterForms = document.querySelectorAll('.newsletter-form'); allNewsletterForms.forEach(form => { form.setAttribute('action', 'https: form.setAttribute('method', 'get'); form.setAttribute('target', '_blank'); const emailInput = form.querySelector('input[type="email"]'); if (emailInput) { emailInput.setAttribute('name', 'EMAIL'); } const nameInput = form.querySelector('input[type="text"]'); if (nameInput) { nameInput.setAttribute('name', 'FNAME'); } let redirectInput = form.querySelector('input[name="redirect"]'); if (!redirectInput) { redirectInput = document.createElement('input'); redirectInput.setAttribute('type', 'hidden'); redirectInput.setAttribute('name', 'redirect'); redirectInput.setAttribute('value', 'https: form.appendChild(redirectInput); console.log('Added redirect parameter to form pointing to custom thank you page.'); } form.addEventListener('submit', function(e) { console.log('Form submitting to Mailchimp via eepurl link...'); }); }); console.log('All newsletter forms updated to use eepurl.com link. Forms should now submit correctly.'); }); document.addEventListener('DOMContentLoaded', function() { const emailElement = document.querySelector('.email-address'); if (emailElement) { emailElement.style.wordBreak = 'break-all'; emailElement.style.wordWrap = 'break-word'; emailElement.style.overflowWrap = 'anywhere'; emailElement.style.maxWidth = '100%'; emailElement.style.whiteSpace = 'nowrap'; emailElement.style.textOverflow = 'ellipsis'; emailElement.style.overflow = 'hidden'; emailElement.style.display = 'inline-block'; if (window.innerWidth <= 768) { emailElement.style.fontSize = '0.9rem'; emailElement.style.maxWidth = '95%'; } if (window.innerWidth <= 480) { emailElement.style.fontSize = '0.85rem'; emailElement.style.letterSpacing = '-0.5px'; emailElement.style.maxWidth = '90%'; } const contactItem = emailElement.closest('.contact-item'); if (contactItem) { contactItem.style.maxWidth = '100%'; contactItem.style.overflow = 'hidden'; } } window.addEventListener('resize', function() { if (emailElement) { if (window.innerWidth <= 480) { emailElement.style.fontSize = '0.85rem'; emailElement.style.letterSpacing = '-0.5px'; emailElement.style.maxWidth = '90%'; } else if (window.innerWidth <= 768) { emailElement.style.fontSize = '0.9rem'; emailElement.style.letterSpacing = 'normal'; emailElement.style.maxWidth = '95%'; } else { emailElement.style.fontSize = '1rem'; emailElement.style.letterSpacing = 'normal'; emailElement.style.maxWidth = '100%'; } } }); }); document.addEventListener('DOMContentLoaded', function() { hidePageLoader(); fixCommonErrors(); lazyLoadImages(); requestIdleCallback(() => { optimizeThirdPartyScripts(); }); setTimeout(hidePageLoader, 1000); }); function hidePageLoader() { const pageLoader = document.getElementById('page-loader'); if (pageLoader) { pageLoader.style.display = 'none'; } const container = document.querySelector('.container'); if (container) { container.style.display = 'block'; container.style.opacity = '1'; } } function fixCommonErrors() { window.caseStudiesLoaded = window.caseStudiesLoaded || function() {}; window.addEventListener('error', function(e) { if (e.message && (e.message.includes('Calendly') || e.message.includes('calendar'))) { e.preventDefault(); e.stopPropagation(); } }, true); } function lazyLoadImages() { document.querySelectorAll('img:not([loading])').forEach(img => { img.setAttribute('loading', 'lazy'); }); const images = document.querySelectorAll('img[data-src]'); if (images.length > 0 && 'IntersectionObserver' in window) { const imageObserver = new IntersectionObserver((entries, observer) => { entries.forEach(entry => { if (entry.isIntersecting) { const img = entry.target; img.src = img.dataset.src; img.onload = () => { img.removeAttribute('data-src'); }; imageObserver.unobserve(img); } }); }); images.forEach(img => { imageObserver.observe(img); }); } } function optimizeThirdPartyScripts() { const thirdPartyScripts = [ { src: 'https: { src: 'https: ]; thirdPartyScripts.forEach(script => { if (!document.querySelector(`script[src="${script.src}"]`)) { const scriptEl = document.createElement('script'); scriptEl.src = script.src; if (script.async) scriptEl.async = true; if (script.defer) scriptEl.defer = true; document.body.appendChild(scriptEl); } }); } const requestIdleCallback = window.requestIdleCallback || function(cb) { const start = Date.now(); return setTimeout(function() { cb({ didTimeout: false, timeRemaining: function() { return Math.max(0, 50 - (Date.now() - start)); } }); }, 1); }; window.addEventListener('load', function() { hidePageLoader(); }); const animateOnScroll = () => { const elements = document.querySelectorAll('.animate-on-scroll'); const observer = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { entry.target.classList.add('animate'); observer.unobserve(entry.target); } }); }, { threshold: 0.1 }); elements.forEach(element => observer.observe(element)); }; class AnimationManager { constructor() { this.initSectionReveal(); this.initServiceCards(); this.initValueCards(); this.initSmoothScroll(); this.initProcessContainers(); this.initTestimonialReveal(); } initSectionReveal() { const sections = document.querySelectorAll('.section-reveal'); const observer = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { entry.target.classList.add('visible'); observer.unobserve(entry.target); } }); }, { threshold: 0.2 }); sections.forEach(section => observer.observe(section)); } initServiceCards() { const cards = document.querySelectorAll('.service-card'); const observer = new IntersectionObserver((entries) => { entries.forEach((entry, index) => { if (entry.isIntersecting) { setTimeout(() => { entry.target.classList.add('visible'); }, index * 100); observer.unobserve(entry.target); } }); }, { threshold: 0.2 }); cards.forEach(card => observer.observe(card)); } initValueCards() { const cards = document.querySelectorAll('.value-card'); cards.forEach(card => { const icon = card.querySelector('.value-icon i'); if (icon) { card.addEventListener('mouseenter', () => { icon.style.transform = 'scale(1.1)'; icon.style.color = 'var(--primary-orange)'; }); card.addEventListener('mouseleave', () => { icon.style.transform = 'scale(1)'; icon.style.color = ''; }); } }); } initSmoothScroll() { document.querySelectorAll('a[href^="#"]').forEach(anchor => { anchor.addEventListener('click', (e) => { e.preventDefault(); const targetId = anchor.getAttribute('href'); if (targetId === '#') return; const targetElement = document.querySelector(targetId); if (targetElement) { targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' }); } }); }); } initProcessContainers() { const containers = document.querySelectorAll('.process-container'); containers.forEach(container => { container.addEventListener('mouseenter', () => { container.style.borderColor = 'var(--primary-orange)'; container.style.backgroundColor = 'rgba(47, 69, 255, 0.03)'; }); container.addEventListener('mouseleave', () => { container.style.borderColor = ''; container.style.backgroundColor = ''; }); }); } initTestimonialReveal() { const testimonials = document.querySelectorAll('.testimonial-item'); const observer = new IntersectionObserver((entries) => { entries.forEach((entry, index) => { if (entry.isIntersecting) { setTimeout(() => { entry.target.classList.add('visible'); }, index * 150); observer.unobserve(entry.target); } }); }, { threshold: 0.2 }); testimonials.forEach(testimonial => observer.observe(testimonial)); } } const initMouseParallax = () => { document.addEventListener('mousemove', (e) => { const { clientX, clientY } = e; const xPos = (clientX / window.innerWidth - 0.5) * 20; const yPos = (clientY / window.innerHeight - 0.5) * 20; const elements = document.querySelectorAll('.floating-element'); elements.forEach((el, index) => { const speed = 1 - (index * 0.1); el.style.transform = `translate(${xPos * speed}px, ${yPos * speed}px)`; }); }); }; document.addEventListener('DOMContentLoaded', () => { const dynamicBg = document.createElement('div'); dynamicBg.className = 'dynamic-bg'; document.body.prepend(dynamicBg); animateOnScroll(); new AnimationManager(); initMouseParallax(); });