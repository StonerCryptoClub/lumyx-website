document.addEventListener('DOMContentLoaded', function() { hidePageLoader(); fixCommonErrors(); lazyLoadImages(); requestIdleCallback(() => { optimizeThirdPartyScripts(); }); setTimeout(hidePageLoader, 1000); }); function hidePageLoader() { const pageLoader = document.getElementById('page-loader'); if (pageLoader) { pageLoader.style.display = 'none'; } const container = document.querySelector('.container'); if (container) { container.style.display = 'block'; container.style.opacity = '1'; } } function fixCommonErrors() { window.caseStudiesLoaded = window.caseStudiesLoaded || function() {}; window.addEventListener('error', function(e) { if (e.message && (e.message.includes('Calendly') || e.message.includes('calendar'))) { e.preventDefault(); e.stopPropagation(); } }, true); } function lazyLoadImages() { document.querySelectorAll('img:not([loading])').forEach(img => { img.setAttribute('loading', 'lazy'); }); const images = document.querySelectorAll('img[data-src]'); if (images.length > 0 && 'IntersectionObserver' in window) { const imageObserver = new IntersectionObserver((entries, observer) => { entries.forEach(entry => { if (entry.isIntersecting) { const img = entry.target; img.src = img.dataset.src; img.onload = () => { img.removeAttribute('data-src'); }; imageObserver.unobserve(img); } }); }); images.forEach(img => { imageObserver.observe(img); }); } } function optimizeThirdPartyScripts() { const thirdPartyScripts = [ { src: 'https: { src: 'https: ]; thirdPartyScripts.forEach(script => { if (!document.querySelector(`script[src="${script.src}"]`)) { const scriptEl = document.createElement('script'); scriptEl.src = script.src; if (script.async) scriptEl.async = true; if (script.defer) scriptEl.defer = true; document.body.appendChild(scriptEl); } }); } const requestIdleCallback = window.requestIdleCallback || function(cb) { const start = Date.now(); return setTimeout(function() { cb({ didTimeout: false, timeRemaining: function() { return Math.max(0, 50 - (Date.now() - start)); } }); }, 1); }; window.addEventListener('load', function() { hidePageLoader(); });